{
	"info": {
		"_postman_id": "2a6065cb-5256-45f9-98ce-9c28d32553d0",
		"name": "Admin Profile",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20098857",
		"_collection_link": "https://universal-meadow-6789.postman.co/workspace/Biye-Korun~4890289e-db5e-4eaf-876b-245ef130110d/collection/20098857-2a6065cb-5256-45f9-98ce-9c28d32553d0?action=share&source=collection_link&creator=20098857"
	},
	"item": [
		{
			"name": "Admin[Auth]",
			"item": [
				{
					"name": "Login_admin",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I should be able to login with valid email and password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Admin_AccessToken\", jsonData.token.accessToken);\r",
													"\r",
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Admin_RefreshToken\", jsonData.token.refreshToken);\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin can able to login successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to login within 6000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'OK' status code when executing to see all user on the  user management \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Login succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to login with valid email and password\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"julfikarrr@gmail.com\",\r\n  \"password\": \"julfikar123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I should not be able to login with invalid email and password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to login with invalid email and password\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to login with invalid email and password\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get 'Unauthorized' status code name when executing to login with invalid email and password\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get 'Invalid email or password' message when executing to login with invalid email and password\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid email or password\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to login with invalid email and password\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"mitull@gmail.com\",\r\n  \"password\": \"@Mitul1234\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to login with invalid email and valid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to login with invalid email and valid password\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to login with invalid email and valid password\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get 'Unauthorized' status code name when executing to login with invalid email and valid password\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get 'Invalid email or password' message when executing to login with invalid email and valid password\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid email or password\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to login with invalid email and valid password\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"mitull@gmail.com\",\r\n  \"password\": \"@Mitul123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to login with valid email and invalid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to login with valid email and invalid password\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to login with valid email and invalid password\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"Admin should get 'Unauthorized' status code name when executing to login with valid email and invalid password\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"Admin should get 'Invalid email or password' message when executing to login with valid email and invalid password\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid email or password\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to login with valid email and invalid password\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"email\": \"mitull@gmail.com\",\r\n  \"password\": \"@Mitul123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Fail)Edit Admin Profile",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an Admin, I should be able to edit my profile information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin can able to edit his profile successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to edit his profile within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'OK' status code when executing to see all user on the  user management \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to login with valid email and password\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmmed\",\r\n  \"gender\": \"Male\",\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/editprofile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"editprofile"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an Admin, I should not be able to edit my profile information without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to edit his profile information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit his profile information without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to edit his profile information without inputting the token \", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit the profile information without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit the profile information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"gender\": \"Male\",\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/editprofile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"editprofile"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an Admin, I should not be able to edit my profile information to keeping the first name field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the first name field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the first name field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the first name field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit my profile information to keeping the first name field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Unexpected token , in JSON at position 18\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the first name field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": ,\r\n  \"lastName\": \"Ahmed\",\r\n  \"gender\": \"Male\",\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/editprofile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"editprofile"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an Admin, I should not be able to edit my profile information to keeping the last name field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"// pm.test(\"Admin should get the '401' status code when executing to edit my profile information to keeping the last name field empty\", function () {\r",
													"//     pm.response.to.have.status(401);\r",
													"// });\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the last name field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"// pm.test(\"Admin get 'Unauthorized' status code when executing to edit my profile information to keeping the last name field empty \", function () {\r",
													"//     pm.response.to.have.status(\"Unauthorized\");\r",
													"// });\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit my profile information to keeping the last name field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    //pm.expect(pm.response.text()).to.include(\"\\\"lastName\\\" is not allowed to be empty\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the first name field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"\",\r\n  \"gender\": \"Male\",\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/editprofile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"editprofile"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an Admin, I should not be able to edit my profile information to keeping the gender field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"// pm.test(\"Admin should get the '401' status code when executing to edit my profile information to keeping the gender field empty\", function () {\r",
													"//     pm.response.to.have.status(401);\r",
													"// });\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the gender field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"// pm.test(\"Admin get 'Unauthorized' status code when executing to edit my profile information to keeping the gender field empty \", function () {\r",
													"//     pm.response.to.have.status(\"Unauthorized\");\r",
													"// });\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit my profile information to keeping the gender field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    //pm.expect(pm.response.text()).to.include(\"\\'firstName\\' is not allowed to be empty\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the gender name field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"gender\": \"\",\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/admin/editprofile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"admin",
												"editprofile"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Admin[Staff]",
			"item": [
				{
					"name": "Role",
					"item": [
						{
							"name": "Create Staff Role",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to create the staff role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"role_id\", jsonData.data._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin can able  to create the staff role successfully\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able to create the staff role within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Created' status code when executing to create the staff role \", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Role create succeed' message successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Role create succeed\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create the staff role\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Product Owner\",\r\n  \"description\": \"Employee Role\",\r\n  \"permissions\": {\r\n    \"staff\": {\r\n      \"read\": true,\r\n      \"create\": true,\r\n      \"update\": true,\r\n      \"delete\": true\r\n    },\r\n    \"role\": {\r\n      \"read\": true,\r\n      \"create\": true,\r\n      \"update\": true,\r\n      \"delete\": true\r\n    },\r\n    \"setting\": {\r\n      \"read\": true,\r\n      \"create\": true,\r\n      \"update\": true,\r\n      \"delete\": true\r\n    },\r\n    \"package\": {\r\n      \"read\": true,\r\n      \"create\": true,\r\n      \"update\": true,\r\n      \"delete\": true\r\n    },\r\n    \"user\": {\r\n      \"read\": true,\r\n      \"create\": true,\r\n      \"update\": true,\r\n      \"delete\": true\r\n    },\r\n    \"payment\": {\r\n      \"read\": true,\r\n      \"create\": true,\r\n      \"update\": true,\r\n      \"delete\": true\r\n    }\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to create the staff role without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing to create the staff role  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the staff role  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to create the staff role  without inputting the token \", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to create the staff role  without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create the staff role  without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Product Owner\",\r\n  \"description\": \"Employee Role\",\r\n  \"staff\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"role\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"setting\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"chat\": {\r\n    \"read\": true,\r\n    \"replyMessage\": true,\r\n    \"createChannel\": true,\r\n    \"addMember\": true,\r\n    \"removeMember\": true,\r\n    \"createBot\": true,\r\n    \"createJob\": true,\r\n    \"updateJob\": true,\r\n    \"deleteJob\": true,\r\n    \"archiveChannel\": true,\r\n    \"deleteChannel\": true,\r\n    \"updateChannel\": true\r\n  },\r\n  \"package\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"user\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"payment\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  }\r\n}"
												},
												"url": {
													"raw": "https://staging-api.biyekorun.us/api/staff/role/create",
													"protocol": "https",
													"host": [
														"staging-api",
														"biyekorun",
														"us"
													],
													"path": [
														"api",
														"staff",
														"role",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get staff Role",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to get all the staff roll",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// var jsonData = JSON.parse(responseBody)\r",
															"// pm.environment.set(\"package_id\", jsonData.data._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin can able to get all the staff roll successfully\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able  to get all the staff roll within 3000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Created' status code when executing  to get all the staff roll \", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Succeed' message successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the staff roll\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/get",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"get"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should be able to get all the staff roll without inputting the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing to get all the staff roll without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the staff roll  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to get all the staff roll  without inputting the token \", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to get all the staff roll without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the staff roll without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "https://staging-api.biyekorun.us/api/staff/role/get",
													"protocol": "https",
													"host": [
														"staging-api",
														"biyekorun",
														"us"
													],
													"path": [
														"api",
														"staff",
														"role",
														"get"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update staff role",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "User should be able to update the staff role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin can able to update the staff role successfully\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able to update the staff role within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Created' status code when executing to update the staff role \", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Role update succeed' message successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Role update succeed\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the staff role\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Full Access\",\r\n  \"description\": \"Admin Role\",\r\n  \"staff\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"role\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"setting\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"chat\": {\r\n    \"read\": true,\r\n    \"replyMessage\": true,\r\n    \"createChannel\": true,\r\n    \"addMember\": true,\r\n    \"removeMember\": true,\r\n    \"createBot\": true,\r\n    \"createJob\": true,\r\n    \"updateJob\": true,\r\n    \"deleteJob\": true,\r\n    \"archiveChannel\": true,\r\n    \"deleteChannel\": true,\r\n    \"updateChannel\": true\r\n  },\r\n  \"package\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"user\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"payment\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/edit/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"edit",
														"{{role_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "User should not be able to update the staff role without inputting the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing to create the staff role  without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to update the staff role  without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to update the staff role  without inputting the token \", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to update the staff role  without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the staff role without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Full Access\",\r\n  \"description\": \"Admin Role\",\r\n  \"staff\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"role\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"setting\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"chat\": {\r\n    \"read\": true,\r\n    \"replyMessage\": true,\r\n    \"createChannel\": true,\r\n    \"addMember\": true,\r\n    \"removeMember\": true,\r\n    \"createBot\": true,\r\n    \"createJob\": true,\r\n    \"updateJob\": true,\r\n    \"deleteJob\": true,\r\n    \"archiveChannel\": true,\r\n    \"deleteChannel\": true,\r\n    \"updateChannel\": true\r\n  },\r\n  \"package\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"user\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"payment\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/edit/{{role_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"edit",
														"{{role_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "User should be able to update the staff role without the role_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '404' status code when executing  to update the staff role without the role_id\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing  to update the staff role without the role_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Not Found' status code when executing  to update the staff role without the role_id \", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing  to update the staff role without the role_id \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the staff role without the role_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"SQA\",\r\n  \"description\": \"Employee Role\",\r\n  \"staff\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"role\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"setting\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"chat\": {\r\n    \"read\": true,\r\n    \"replyMessage\": true,\r\n    \"createChannel\": true,\r\n    \"addMember\": true,\r\n    \"removeMember\": true,\r\n    \"createBot\": true,\r\n    \"createJob\": true,\r\n    \"updateJob\": true,\r\n    \"deleteJob\": true,\r\n    \"archiveChannel\": true,\r\n    \"deleteChannel\": true,\r\n    \"updateChannel\": true\r\n  },\r\n  \"package\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"user\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  },\r\n  \"payment\": {\r\n    \"read\": true,\r\n    \"create\": true,\r\n    \"update\": true,\r\n    \"delete\": true\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/edit/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"edit",
														""
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete staff role",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to delete the staff role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin can able to delete the staff role successfully\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able to delete the staff role within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to delete the staff role\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete the staff role\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/staff/role/delete/need to input the id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"role",
														"delete",
														"need to input the id"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Staff",
					"item": [
						{
							"name": "Create Staff",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to create the staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody)\r",
															"pm.environment.set(\"staff_id\", jsonData.data.staff.user._id);\r",
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin can able to create the staff successfully\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able to create the staff within 7000ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(7000);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Created' status code when executing to create a new staff \", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Staff add succeedd' message successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Staff add succeed\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create the staff\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"firstName\": \"Israk Zahan\",\r\n  \"lastName\": \"Monisha\",\r\n \"permission\": [\r\n    \"{{role_id}}\"\r\n  ],\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n  },\r\n  \"dateOfBirth\": \"2023-10-10\",\r\n  \"gender\": \"Female\",\r\n  \"password\": \"123456\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"create"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to create the staff without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing  to create the staff without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to create the staff without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to create the staff without inputting the token \", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to create the staff without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to create the staff without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"israk@gmail.com\",\r\n  \"firstName\": \"Israk\",\r\n  \"lastName\": \"Zahan\",\r\n  \"permission\": \"64eadb6a5bd5576dd4df3cd8\",\r\n  \"phone\": \"01753443558\",\r\n  \"dateOfBirth\": \"2023-10-10\",\r\n  \"gender\": \"Female\",\r\n  \"password\": \"123456\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/create",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"create"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all Staff",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to get all the staff list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin get all the staff list successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able  to get all the staff list within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'OK' status code when executing to get all the staff list \", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Succeed' message successfully\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the staff list\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/staff/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to get all the staff list without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing to get all the staff list without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to get all the staff list without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to get all the staff list without inputting the token \", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to get all the staff list without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to get all the staff list without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/staff/getall",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"getall"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Staff",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to update the staff Information",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin can able to update the staff email successfully\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able  to update the staff email within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Created' status code when executing  to update the staff email \", function () {\r",
															"    pm.response.to.have.status(\"Created\");\r",
															"});\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request  to update the staff email\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\r\n{\r\n  \"firstName\": \"Israk Zahann\",\r\n  \"lastName\": \"Monisha\",\r\n  \"permission\": [\r\n    \"{{role_id}}\"\r\n  ],\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n  },\r\n  \"basicInfo\": {\r\n    \"dateOfBirth\": \"2023-10-10\",\r\n  \"gender\": \"Female\"\r\n  }\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/update/{{staff_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"update",
														"{{staff_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to update the staff information without inputting the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing to update the staff information without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to update the staff information without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to update the staff information without inputting the token \", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to update the staff information without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the staff information without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"israkzahan21@gmail.com\",\r\n  \"firstName\": \"Israk Zahan\",\r\n  \"lastName\": \"Monisha\",\r\n  \"permission\": \"64eadb6a5bd5576dd4df3cd8\",\r\n  \"phone\": \"01753443778\",\r\n  \"dateOfBirth\": \"2023-10-10\",\r\n  \"gender\": \"Female\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/update/{{staff_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"update",
														"{{staff_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to update the staff information without inputting the staff_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '404' status code when executing to update the staff information without inputting the staff_id\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to update the staff information without inputting the staff_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Not Found' status code when executing  to update the staff information without inputting the staff_id \", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Route not found' message when executing  to update the staff information without inputting the staff_id \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Route not found\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to update the staff information without inputting the staff_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PATCH",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"email\": \"israkzahan21@gmail.com\",\r\n  \"firstName\": \"Israk Zahann\",\r\n  \"lastName\": \"Monisha\",\r\n  \"permission\": \"64eadb6a5bd5576dd4df3cd8\",\r\n  \"phone\": \"01753443778\",\r\n  \"dateOfBirth\": \"2023-10-10\",\r\n  \"gender\": \"Female\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/staff/update/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"update",
														""
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Delete Staff",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Admin should be able to delete the staff",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"//Validate the status code\r",
															"pm.test(\"Admin can able to delete staff successfully\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin can able to delete staff within 1500ms\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'OK' status code when executing to delete staff \", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete staff\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/staff/delete/{{staff_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"delete",
														"{{staff_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Admin should not be able to delete the staff without the token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '401' status code when executing to delete staff without inputting the token\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete staff without inputting the token\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Unauthorized' status code when executing to delete staff without inputting the token\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'Authorization required' message when executing to delete staff without inputting the token \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"message\");\r",
															"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete staff without inputting the token\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/staff/delete/{{staff_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"delete",
														"{{staff_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin should not be able to delete the staff without the staff_id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Validate the status code\r",
															"pm.test(\"Admin should get the '400' status code when executing to delete the staff without the staff_id\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"//validate the response time\r",
															"pm.test(\"Admin should get the response below 2000 ms when executing to delete the staff without the staff_id\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
															"});\r",
															"\r",
															"//validate the status code name\r",
															"pm.test(\"Admin get 'Bad Request' status code when executing to delete the staff without the staff_id\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"//validate the response body\r",
															"pm.test(\"Admin get 'false' message when executing to delete the staff without the staff_id \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(\"success\");\r",
															"    pm.expect(pm.response.text()).to.include(\"false\");\r",
															"});\r",
															"\r",
															"//validate the response headers\r",
															"pm.test(\"Validate the response header of the request to delete the staff without the staff_id\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\");\r",
															"     pm.response.to.have.header(\"Date\");\r",
															"     pm.response.to.have.header(\"Connection\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Admin_AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/staff/delete/{{}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"staff",
														"delete",
														"{{}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Package",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I should be able to create the package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"package_id\", jsonData.data._id);\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin can able to create package successfully\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to create package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Created' status code when executing to see all user on the  user management \", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Package create succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Package create succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create the package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 2\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I should not be able to create package without inputting the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to edit his profile information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit his profile information without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to edit his profile information without inputting the token \", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit the profile information without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit the profile information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to create package to keeping the name field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the name field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the name field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the name field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit my profile information to keeping the name field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"name\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Name is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the name field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_RefreshToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to create package to keeping the price field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the price field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the price field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the price field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'price is a required field' message when executing to edit my profile information to keeping the price field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"price\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the price field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to create package to keeping the discountPrice field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the discountPrice field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the discountPrice field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the discountPrice field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'discountPrice' message when executing to edit my profile information to keeping the discountPrice field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"discountPrice\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Discount price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the discountPrice field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to create package to keeping the usd Price field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the usd Price field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the usd Price field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the usd Price field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'discountPrice' message when executing to edit my profile information to keeping the usd Price field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"usdPrice\");\r",
													"    pm.expect(pm.response.text()).to.include(\"USD price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the usd Price field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_RefreshToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to create package to keeping the usdDiscountPrice field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the usdDiscountPrice field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the usdDiscountPrice  field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the usdDiscountPrice  field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'USD discount price is a required field' message when executing to edit my profile information to keeping the usdDiscountPrice  field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"usdDiscountPrice\");\r",
													"    pm.expect(pm.response.text()).to.include(\"USD discount price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the usdDiscountPrice  field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to create package to keeping the duration field empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to edit my profile information to keeping the duration field empty\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to edit my profile information to keeping the duration  field empty\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to edit my profile information to keeping the duration  field empty \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit my profile information to keeping the duration  field empty \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit my profile information to keeping the duration field empty\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": \"\",\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get all Package",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an Admin, I should be able to get all type of package list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin get all the package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to create package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'OK' status code when executing to see all user on the  user management \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create the package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I should be able to update a package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin can able to update the package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to update package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'OK' status code when executing to update a package \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Package update succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Package update succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update a package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{package_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I should not be able to update a package list without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to update the package list without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to update the package list without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to edit his profile information without inputting the token \", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to edit the profile information without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to edit the profile information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{package_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to update a package information  without the package_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '404' status code when executing  to update a package information  without the package_id\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing  to update a package information  without the package_id\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Not Found' status code when executing  to update a package information  without the package_id \", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing  to update a package information  without the package_id \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request  to update a package information  without the package_id\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to update a package information  without discountPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing  to update a package information without the discountPrice\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing  to update a package information without the discountPrice\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing  to update a package information without the usdDiscountPrice \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'discountPrice' is not allowed to be empty' message when executing  to update a package information without the discountPrice \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"discountPrice\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Discount price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request  to update a package information without the discountPrice\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{package_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to update a package information  without the usdPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing  to update a package information without the usdPrice\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing  to update a package information without the usdPrice\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing  to update a package information without the usdDiscountPrice \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'USD price is a required field' is not allowed to be empty' message when executing  to update a package information without the usdPrice \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"usdPrice\");\r",
													"    pm.expect(pm.response.text()).to.include(\"USD price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request  to update a package information without the usdPrice\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{package_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to update a package information  without the usdDiscountPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing  to update a package information without the usdDiscountPrice\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing  to update a package information without the usdDiscountPrice\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing  to update a package information without the usdDiscountPrice \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'usdDiscountPrice' is not allowed to be empty' message when executing  to update a package information without the usdDiscountPrice \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"usdDiscountPrice\");\r",
													"    pm.expect(pm.response.text()).to.include(\"USD discount price is a required field\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request  to update a package information without the usdDiscountPrice\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{package_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to update a package information  without the duration",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing  to update a package information without the  duration\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing  to update a package information without the  duration\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing  to update a package information without the  duration \", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get '\\\"discountPrice\\\" is not allowed to be empty' message when executing  to update a package information without the  duration \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request  to update a package information without the  duration\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold Version 3\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": \"\",\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{package_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I should be able to delete staff package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin can able to delete staff package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to delete staff package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'OK' status code when executing  to delete staff package \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Package delete succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Package delete succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete staff package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"duration\": \"3\",\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/delete/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"delete",
												"{{package_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I should not be able to delete package without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to delete package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to delete package without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to delete package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to delete package without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete package without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"duration\": \"3\",\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/delete/{{package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"delete",
												"{{package_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to delete package without the package_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '500' status code when executing to delete a package information  without the package_id\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to delete a package information  without the package_id\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Internal Server Error' status code when executing to delete a package information  without the package_id \", function () {\r",
													"    pm.response.to.have.status(\"Internal Server Error\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to delete a package information  without the package_id \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete a package information  without the package_id\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"duration\": \"3\",\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/delete/{{}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"delete",
												"{{}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create Default",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an Admin, I should be able to create default package for all user initial account free",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// var jsonData = JSON.parse(responseBody)\r",
													"// pm.environment.set(\"package_id\", jsonData.data._id);\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin can able to create default package successfully\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to create default package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Created' status code when executing to create default package \", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Package create succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"true\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create the package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  }\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create",
												"default"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get default package",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Admin should be able to get all the default package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var defaultPackageBody=JSON.parse(responseBody)\r",
													"pm.environment.set(\"default_package_id\",defaultPackageBody.data._id);\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User  get the default package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User  can able to get the default package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User  get 'OK' status code when executing to get all the default package\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User  get 'Succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get all the default package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"default"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Admin should be able to get all the default package without inputting the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to get all the default package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to get all the default package without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to get all the default package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to get all the default package without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get all the default package without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"default"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update Default package",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, I should be able to update default package information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"Admin can able to update default package information successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin can able to update default package information within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'OK' status code when executing to update default package information \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Default package update succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Default package update succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update default package information\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 120\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 120\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/default/{{default_package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"default",
												"{{default_package_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, I should not be able to update default package information without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to update default package information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to update default package information without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to update default package information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to update default package information without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update default package information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 120\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 120\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/default/{{default_package_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"default",
												"{{default_package_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, I should not be able to update default package information without the default_package_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '404' status code when executing to update default package information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to update default package information without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Not Found' status code when executing to update default package information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to update default package information without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Please provide valid package Id\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update default package information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 120\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 120\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/default/{{}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"default",
												"{{}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Package(Access denied)",
			"item": [
				{
					"name": "All Package",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to see all package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User can able to see all package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to see all package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see all package\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to create on the new package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Package ID\", jsonData.data._id);\r",
													"\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User can able to see all package successfully\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to see all package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'Created' status code when executing to see all package\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I should not be able to create on the new package given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to create on the new package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 3000 ms when executing to create on the new package without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to create on the new package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to create on the new package without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create on the new package without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something New\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an user, I should not be able to create on the new package given without body data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to create on the new package without inputting the body data\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 3000 ms when executing to create on the new package without inputting the body data\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to create on the new package without inputting the body data\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create on the new package without inputting the body data\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"create"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to update on the package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to update on the package successfully\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to update on the package within 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'Created' status code when executing to update on the package\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update on the package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something one\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{Package ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I should not be able to update on the package given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to update on the package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 3000 ms when executing to update on the package without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to update on the package without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to update on the package without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update on the package without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something one\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{Package ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an user, I should not be able to update on the package given without package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '404' status code when executing to update on the package without inputting the package id\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 3000 ms when executing to update on the package without inputting the package id\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Not Found' status code when executing to update on the package without inputting the package id\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to update on the package without inputting the package id \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update on the package without inputting the package id\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Gold\",\r\n  \"description\": \"Something one\",\r\n  \"price\": \"8000\",\r\n  \"discountPrice\": \"5000\",\r\n  \"usdPrice\": \"8000\",\r\n  \"usdDiscountPrice\": \"5000\",\r\n  \"duration\": 3,\r\n  \"badgeName\": \"Top Seller\",\r\n  \"benefits\": [\r\n    {\r\n      \"name\": \"3 Biye Korun Live Passes\",\r\n      \"isActive\": true\r\n    }\r\n  ],\r\n  \"permission\": {\r\n    \"chat\": {\r\n      \"name\": \"Send 100 Message\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 100,\r\n      \"isActive\": true\r\n    },\r\n    \"viewContact\": {\r\n      \"name\": \"View up to 75 Contact Numbers\",\r\n      \"isLimit\": true,\r\n      \"totalLimit\": 75,\r\n      \"isActive\": true\r\n    }\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an user, I should not be able to update on the package given without body data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '400' status code when executing to update on the package without inputting the body data\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 3000 ms when executing to update on the package without inputting the package id\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Bad Request' status code when executing to update on the package without inputting the package id\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update on the package without inputting the package id\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/{{Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"{{Package ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to delete on the package",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User can able to delete package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to delete package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to delete package\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package/delete/{{Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"delete",
												"{{Package ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I should not be able to delete on the package given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to delete package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 3000 ms when executing to delete package for all user inital free account without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to delete package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to delete package for all user inital free account without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to delete package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package/delete/{{Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"delete",
												"{{Package ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create Default",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an Admin, I should be able to create default package for all user initial account free",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Default Package ID\", jsonData.data._id);\r",
													"\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User can able to create default package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to default default package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to default default package\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to default default package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"default"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an Admin, I should not be able to create default package for all user initial account free given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to create default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to create default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to create default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to create default package for all user inital free account without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/package/default",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"default"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update Default",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to update default package for all user inital account free",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User can able to update default package successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to update default package within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to update default package\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update default package\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/default/{{Default Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"default",
												"{{Default Package ID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I should not be able to create default package for all user inital free account given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '401' status code when executing to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Unauthorized' status code when executing to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'Authorization required' message when executing to update default package for all user inital free account without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/default/{{Default Package ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"default",
												"{{Default Package ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an user, I should not be able to create default package for all user inital free account given without default package ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"Admin should get the '404' status code when executing to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"Admin should get the response below 2000 ms when executing to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"Admin get 'Not Found' status code when executing to update default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Admin get 'false' message when executing to update default package for all user inital free account without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create default package for all user inital free account without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chat\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  },\r\n  \"viewContact\": {\r\n    \"isLimit\": true,\r\n    \"totalLimit\": 100\r\n  }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/package/update/default/{{}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"package",
												"update",
												"default",
												"{{}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}